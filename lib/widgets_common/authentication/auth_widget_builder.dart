import 'package:find_the_treasure/models/user_model.dart';
import 'package:find_the_treasure/services/auth.dart';
import 'package:find_the_treasure/services/database.dart';
import 'package:find_the_treasure/services/firebase_storage_service.dart';
import 'package:find_the_treasure/services/image_picker_service.dart';
import 'package:find_the_treasure/view_models/challenge_view_model.dart';
import 'package:find_the_treasure/view_models/location_view_model.dart';
import 'package:find_the_treasure/view_models/question_view_model.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:provider/provider.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatelessWidget {
  final Widget Function(BuildContext, AsyncSnapshot<User>) builder;

  const AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthBase>(context, listen: false);
    return StreamBuilder<User>(
      stream: authService.authStateChanges(),
      builder: (BuildContext context, AsyncSnapshot<User> snapshot) {
        final User user = snapshot.data;
        if (user != null) {
          
          //  This method is required to be called when initialize the application. It is to acknowledge your application has been updated to support pending purchases.
          InAppPurchaseConnection.enablePendingPurchases();
          return MultiProvider(
            providers: [
              Provider<User>.value(value: user),
              Provider<DatabaseService>(
                create: (_) => DatabaseService(uid: user.uid),
              ),
              Provider<ImagePickerService>(
                create: (_) => ImagePickerService(),
              ),
              ListenableProvider<FirebaseStorageService>(
                create: (_) => FirebaseStorageService(uid: user.uid),
              ),
              ChangeNotifierProvider<LocationViewModel>(
                  create: (_) => LocationViewModel()),
              ChangeNotifierProvider<QuestionViewModel>(
                  create: (_) => QuestionViewModel()),
              ChangeNotifierProvider<ChallengeViewModel>(
                  create: (_) => ChallengeViewModel()),
            ],
            child: Consumer<DatabaseService>(
              builder: (_, databaseService, __) => StreamProvider<UserData>(
                initialData: UserData(
                  userDiamondCount: 0,
                  // userKeyCount: 0,
                  id: '',
                  displayName: '',
                  email: '',
                  isAdmin: false,
                  locationsExplored: [],
                  photoURL: '',
                  points: 0,
                  seenIntro: true,
                  uid: user.uid,
                ),
                create: (_) => databaseService.userStream(),
                child: builder(context, snapshot),
              ),
            ),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}

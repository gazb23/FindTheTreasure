import 'package:find_the_treasure/models/user_model.dart';
import 'package:find_the_treasure/services/auth.dart';
import 'package:find_the_treasure/services/database.dart';
import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:provider/provider.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatelessWidget {
  final Widget Function(BuildContext, AsyncSnapshot<User>) builder;

  const AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthBase>(context, listen: false);
    return StreamBuilder<User>(
      stream: authService.onAuthStateChanged,
      builder: (BuildContext context, AsyncSnapshot<User> snapshot) {
        final User user = snapshot.data;
        if (user != null) {
          //  This method is required to be called when initialize the application. It is to acknowledge your application has been updated to support pending purchases.
          InAppPurchaseConnection.enablePendingPurchases();
          return MultiProvider(
            providers: [
              Provider<User>.value(value: user),
              Provider<DatabaseService>(
                create: (_) => DatabaseService(uid: user.uid),
              ),
            ],
            child: Consumer<DatabaseService>(
              builder: (_, databaseService, __) =>
                  StreamProvider<UserData>.value(
                value: databaseService.userStream(),
                initialData: UserData(
                    displayName: '',
                    email: '',
                    photoURL: '',
                    uid: '',
                    userDiamondCount: 0,
                    userKeyCount: 0),
                child: builder(context, snapshot),
              ),
            ),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}
